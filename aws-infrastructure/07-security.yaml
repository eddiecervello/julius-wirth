AWSTemplateFormatVersion: '2010-09-09'
Description: 'Julius Wirth WAF Security Rules and Web Application Firewall'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['development', 'staging', 'production']
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: 'julius-wirth'
    Description: Project name for resource tagging

  RateLimitThreshold:
    Type: Number
    Default: 2000
    MinValue: 100
    MaxValue: 10000
    Description: Rate limit threshold per 5 minutes

Resources:
  # WAF Web ACL
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${ProjectName}-waf-${Environment}'
      Description: !Sub 'WAF for ${ProjectName} ${Environment}'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      
      Rules:
        # 1. Rate Limiting Rule
        - Name: RateLimitRule
          Priority: 1
          Action:
            Block: {}
          Statement:
            RateBasedStatement:
              Limit: !Ref RateLimitThreshold
              AggregateKeyType: IP
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
        
        # 2. AWS Managed Rules - Core Rule Set
        - Name: AWSManagedRulesCore
          Priority: 2
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules:
                - Name: SizeRestrictions_BODY
                - Name: GenericRFI_BODY
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCore
        
        # 3. AWS Managed Rules - SQL Injection
        - Name: AWSManagedRulesSQL
          Priority: 3
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesSQL
        
        # 4. AWS Managed Rules - XSS
        - Name: AWSManagedRulesXSS
          Priority: 4
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesXSSRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesXSS
        
        # 5. AWS Managed Rules - Linux Operating System
        - Name: AWSManagedRulesLinux
          Priority: 5
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesLinuxRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesLinux
        
        # 6. AWS Managed Rules - PHP Application
        - Name: AWSManagedRulesPHP
          Priority: 6
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesPHPRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesPHP
        
        # 7. Geo-blocking Rule (optional - block specific countries)
        - Name: GeoBlockRule
          Priority: 7
          Action:
            Block: {}
          Statement:
            GeoMatchStatement:
              CountryCodes: ['CN', 'RU', 'KP']  # Block China, Russia, North Korea
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: GeoBlockRule
        
        # 8. IP Reputation Rule
        - Name: IPReputationRule
          Priority: 8
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: IPReputationRule
        
        # 9. Bot Control Rule (basic protection)
        - Name: BotControlRule
          Priority: 9
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesBotControlRuleSet
              ManagedRuleGroupConfigs:
                - AWSManagedRulesBotControlRuleSet:
                    InspectionLevel: COMMON
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: BotControlRule
        
        # 10. Admin Panel Protection
        - Name: AdminPanelProtection
          Priority: 10
          Action:
            Block: {}
          Statement:
            AndStatement:
              Statements:
                - ByteMatchStatement:
                    FieldToMatch:
                      UriPath: {}
                    TextTransformations:
                      - Priority: 0
                        Type: LOWERCASE
                    SearchString: '/admin'
                    PositionalConstraint: STARTS_WITH
                - NotStatement:
                    Statement:
                      IPSetReferenceStatement:
                        Arn: !GetAtt AdminIPSet.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AdminPanelProtection
      
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${ProjectName}WAF${Environment}'
      
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-waf-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # IP Set for Admin Access
  AdminIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: !Sub '${ProjectName}-admin-ips-${Environment}'
      Description: Allowed IP addresses for admin access
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses:
        - 127.0.0.1/32  # Placeholder - replace with actual admin IPs
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-admin-ips-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # WAF Logging Configuration
  WAFLoggingConfig:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      ResourceArn: !GetAtt WebACL.Arn
      LogDestinationConfigs:
        - !Sub '${WAFLogGroup.Arn}:*'
      LoggingFilter:
        DefaultBehavior: KEEP
        Filters:
          - Behavior: KEEP
            Conditions:
              - ActionCondition:
                  Action: BLOCK
            Requirement: MEETS_ANY

  # CloudWatch Log Group for WAF
  WAFLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/wafv2/${ProjectName}-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-waf-logs-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarms for WAF
  WAFBlockedRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High number of blocked requests
      AlarmActions:
        - !Ref SecurityAlarmTopic
      MetricName: BlockedRequests
      Namespace: AWS/WAFV2
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: WebACL
          Value: !Sub '${ProjectName}-waf-${Environment}'
        - Name: Region
          Value: CloudFront
        - Name: Rule
          Value: ALL

  WAFRateLimitAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Rate limit threshold exceeded
      AlarmActions:
        - !Ref SecurityAlarmTopic
      MetricName: BlockedRequests
      Namespace: AWS/WAFV2
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: WebACL
          Value: !Sub '${ProjectName}-waf-${Environment}'
        - Name: Region
          Value: CloudFront
        - Name: Rule
          Value: RateLimitRule

  # Security Group Rules for Additional Protection
  WAFSecurityGroupRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue: !Sub '${ProjectName}-web-sg-id-${Environment}'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      Description: HTTPS access through WAF

  # SNS Topic for Security Alarms
  SecurityAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-security-alarms-${Environment}'
      DisplayName: Julius Wirth Security Alarms

  # Lambda Function for WAF Log Analysis (optional)
  WAFLogAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-waf-log-analysis-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt WAFLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import gzip
          import base64
          from datetime import datetime
          
          def lambda_handler(event, context):
              """
              Process WAF logs and send alerts for security incidents
              """
              # Decode and decompress CloudWatch Logs data
              cw_data = event['awslogs']['data']
              compressed_payload = base64.b64decode(cw_data)
              uncompressed_payload = gzip.decompress(compressed_payload)
              log_data = json.loads(uncompressed_payload)
              
              # Process log events
              security_events = []
              for log_event in log_data['logEvents']:
                  message = json.loads(log_event['message'])
                  
                  # Check for blocked requests
                  if message.get('action') == 'BLOCK':
                      security_events.append({
                          'timestamp': log_event['timestamp'],
                          'clientIP': message.get('httpRequest', {}).get('clientIP'),
                          'terminatingRuleId': message.get('terminatingRuleId'),
                          'uri': message.get('httpRequest', {}).get('uri')
                      })
              
              # Send notifications for high-risk events
              if len(security_events) > 10:  # Threshold for notification
                  sns = boto3.client('sns')
                  sns.publish(
                      TopicArn=context.security_topic_arn,
                      Subject='WAF Security Alert',
                      Message=f'High number of blocked requests detected: {len(security_events)} events'
                  )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(f'Processed {len(security_events)} security events')
              }
      Environment:
        Variables:
          SECURITY_TOPIC_ARN: !Ref SecurityAlarmTopic
      Timeout: 60

  # IAM Role for WAF Lambda Function
  WAFLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SecurityAlarmTopic

  # CloudWatch Logs Subscription Filter
  WAFLogSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      LogGroupName: !Ref WAFLogGroup
      FilterPattern: '[timestamp, request_id, client_ip, uri, action="BLOCK"]'
      DestinationArn: !GetAtt WAFLogAnalysisFunction.Arn

  # Lambda Permission for CloudWatch Logs
  WAFLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WAFLogAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceArn: !Sub '${WAFLogGroup.Arn}:*'

Outputs:
  WebACLId:
    Description: WAF Web ACL ID
    Value: !GetAtt WebACL.Id
    Export:
      Name: !Sub '${ProjectName}-waf-acl-id-${Environment}'

  WebACLArn:
    Description: WAF Web ACL ARN
    Value: !GetAtt WebACL.Arn
    Export:
      Name: !Sub '${ProjectName}-waf-acl-arn-${Environment}'

  AdminIPSetId:
    Description: Admin IP Set ID
    Value: !GetAtt AdminIPSet.Id
    Export:
      Name: !Sub '${ProjectName}-admin-ipset-id-${Environment}'

  WAFLogGroupName:
    Description: WAF CloudWatch Log Group Name
    Value: !Ref WAFLogGroup
    Export:
      Name: !Sub '${ProjectName}-waf-log-group-${Environment}'

  SecurityAlarmTopicArn:
    Description: SNS topic for security alarms
    Value: !Ref SecurityAlarmTopic
    Export:
      Name: !Sub '${ProjectName}-security-alarm-topic-${Environment}'

  WAFLogAnalysisFunctionArn:
    Description: WAF Log Analysis Lambda Function ARN
    Value: !GetAtt WAFLogAnalysisFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-waf-lambda-${Environment}'