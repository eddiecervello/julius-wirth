version: '3.8'

x-lagoon-project:
  # Lagoon project name (must match .lagoon.yml)
  &lagoon-project julius-wirth-drupal

x-lagoon-local-dev-url:
  &lagoon-local-dev-url http://julius-wirth.docker.amazee.io

x-volumes:
  &default-volumes
    # Define all volumes you would like to have real-time mounted into the docker containers
    volumes:
      - .:/app:delegated

x-environment:
  &default-environment
    LAGOON_PROJECT: *lagoon-project
    # Route that should be used locally, if you are using pygmy, this route *must* end with .docker.amazee.io
    LAGOON_ROUTE: *lagoon-local-dev-url
    # Uncomment if you like to have the system behave like in production
    #LAGOON_ENVIRONMENT_TYPE: production
    # Uncomment to enable xdebug and then restart via `docker-compose up -d`
    #XDEBUG_ENABLE: true

services:

  cli: # cli container, will be used for executing composer and any local commands (drush, drupal, etc.)
    build:
      context: .
      dockerfile: lagoon/cli.dockerfile
    image: *lagoon-project # this will make the name of the image to be the same as the name of the project
    labels:
      # Lagoon Labels
      lagoon.type: cli-persistent
      lagoon.persistent.name: nginx # mount the persistent storage of nginx into this container
      lagoon.persistent: /app/sites/default/files/ # location where the persistent storage should be mounted
    << : *default-volumes # loads the defined volumes from the top
    environment:
      << : *default-environment # loads the defined environment variables from the top
    volumes_from: # mount the ssh-agent from the pygmy or cachalot ssh-agent
      - container:amazeeio-ssh-agent

  nginx:
    build:
      context: .
      dockerfile: lagoon/nginx.dockerfile
      args:
        CLI_IMAGE: *lagoon-project # Use the cli image we just built
    labels:
      lagoon.type: nginx-php-persistent
      lagoon.persistent: /app/sites/default/files/ # define where the persistent storage should be mounted too
    << : *default-volumes # loads the defined volumes from the top
    depends_on:
      - cli # basically just tells docker-compose to build the cli first
    environment:
      << : *default-environment # loads the defined environment variables from the top
      LAGOON_LOCALDEV_URL: *lagoon-local-dev-url
    networks:
      - amazeeio-network
      - default

  php:
    build:
      context: .
      dockerfile: lagoon/php.dockerfile
      args:
        CLI_IMAGE: *lagoon-project # Use the cli image we just built
    labels:
      lagoon.type: nginx-php-persistent
      lagoon.name: nginx # we want this service be part of the nginx pod in Lagoon
      lagoon.persistent: /app/sites/default/files/ # define where the persistent storage should be mounted too
    << : *default-volumes # loads the defined volumes from the top
    depends_on:
      - cli # basically just tells docker-compose to build the cli first
    environment:
      << : *default-environment # loads the defined environment variables from the top

  mariadb:
    image: uselagoon/mariadb-10.5-drupal:latest # Use Lagoon Drupal MariaDB image
    labels:
      lagoon.type: mariadb
    ports:
      - "3306" # exposes the port 3306 with a random local port, find it with `docker-compose port mariadb 3306`
    environment:
      << : *default-environment
      MARIADB_DATABASE: drupal7
      MARIADB_USERNAME: drupal7
      MARIADB_PASSWORD: drupal7

  redis:
    image: uselagoon/redis-6:latest
    labels:
      lagoon.type: redis
    environment:
      << : *default-environment

  solr:
    image: uselagoon/solr-7.7-drupal:latest
    labels:
      lagoon.type: solr
    ports:
      - "8983" # exposes the port 8983 with a random local port, find it with `docker-compose port solr 8983`
    environment:
      << : *default-environment

  # Uncomment for Varnish caching
  # varnish:
  #   image: uselagoon/varnish-6:latest
  #   labels:
  #     lagoon.type: varnish
  #   depends_on:
  #     - nginx
  #   environment:
  #     << : *default-environment
  #     VARNISH_BYPASS: "true" # Bypass Varnish for local development

networks:
  amazeeio-network:
    external: true
